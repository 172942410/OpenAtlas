//
// ReportDisconnectedRegions
//   Usage: ReportDisconnectedRegions CubesModel LabelLUT
//          where
//          CubesModel is a .vtk model generated by GenerateCubesFromLabnels
//          LabelLUT is the label lookup file
//      
//
#include <vtksys/SystemTools.hxx>

#include <vtkPolyDataConnectivityFilter.h>
#include <vtkPolyDataReader.h>
#include <vtkCleanPolyData.h>
#include <vtkSmartPointer.h>

#include <fstream>
#include <sstream>
#include <string>

int main (int argc, char *argv[])
{
  if (argc < 3)
    {
    std::cout << "Usage: " << argv[0] << " CubesModel FiducialDirectory" << std::endl;
    return EXIT_FAILURE;
    }
 
  std::string fiducialDirectory(argv[2]);
  vtksys::SystemTools::MakeDirectory(argv[2]);

  // Create all of the classes we will need
  vtkSmartPointer<vtkPolyDataReader> reader =
    vtkSmartPointer<vtkPolyDataReader>::New();
  vtkSmartPointer<vtkPolyDataConnectivityFilter> confilter =
    vtkSmartPointer<vtkPolyDataConnectivityFilter>::New();

  reader->SetFileName(argv[1]);
 
  confilter->SetInputConnection(reader->GetOutputPort());
  confilter->SetExtractionModeToLargestRegion();
  confilter->Update();
  if (confilter->GetNumberOfExtractedRegions() > 1)
    {
    std::cout << "WARNING: " 
              << vtksys::SystemTools::GetFilenameName(std::string(argv[1]))
              << " has "
              << confilter->GetNumberOfExtractedRegions()
              << " disconnected regions" << std::endl;
    // create a list of fiducials
    std::string anatomyName = vtksys::SystemTools::GetFilenameWithoutExtension(std::string(argv[1]));
    std::stringstream fiducialFileName;
    fiducialFileName << fiducialDirectory << "/"
                     << anatomyName
                     << ".csv";
    std::ofstream fout(fiducialFileName.str().c_str());
    if (fout.fail())
      {
      std::cout << "cannot open " << fiducialFileName.str() << std::endl;
      return EXIT_FAILURE;
      }
    // header
    fout << "# Markups fiducial file version = 4.4" << std::endl;
    fout << "# CoordinateSystem = 0" << std::endl;
    fout << "# columns = id,x,y,z,ow,ox,oy,oz,vis,sel,lock,label,desc,associatedNodeID" << std::endl;

    vtkSmartPointer<vtkCleanPolyData> cleaner =
      vtkSmartPointer<vtkCleanPolyData>::New();
    cleaner->SetInputConnection( confilter->GetOutputPort());
    // Skip the first region
    for (int i = 1; i < confilter->GetNumberOfExtractedRegions(); ++i)
      {
      confilter->SetExtractionModeToSpecifiedRegions();
      confilter->InitializeSpecifiedRegionList();
      confilter->AddSpecifiedRegion(i);
      cleaner->Update();
      std::cout << "Region " << i << " has " << cleaner->GetOutput()->GetNumberOfPoints() << " points" << std::endl;
      double centroid[3];
      int mid = cleaner->GetOutput()->GetNumberOfPoints() / 2;
      mid = 0;
      centroid[0] = cleaner->GetOutput()->GetPoints()->GetPoint(mid)[0];
      centroid[1] = cleaner->GetOutput()->GetPoints()->GetPoint(mid)[1];
      centroid[2] = cleaner->GetOutput()->GetPoints()->GetPoint(mid)[2];
      std::stringstream fiducialName;
      fiducialName << vtksys::SystemTools::GetFilenameWithoutExtension(std::string(argv[1]))
                   << "_" << i;
      fout << "vtkMRMLMarkupsFiducialNode_" << anatomyName << "," // id
           << centroid[0] << "," << centroid[1] << "," << centroid[2] << "," // x,y,z
           << "0," // ows
           << "0," // ox
           << "0," // oy
           << "1," // oz
           << "0," // vis
           << "1," // sel
           << "1," // lock
           << fiducialName.str() << ","
           << "" << "Disconnected region" << "," // description
           << "vtkMRMLScalarVolumeNode2"
           << std::endl;
      }
    fout.close();
    std::stringstream mrmlFileName;
    mrmlFileName << fiducialDirectory << "/"
                     << anatomyName
                     << ".mrml";
    std::ofstream mout(mrmlFileName.str().c_str());
    mout << "<MRML  version=\"Slicer4.4.0\" userTags=\"\">" << std::endl;
    mout << " <MarkupsFiducial";
    mout << " id=\"vtkMRMLMarkupsFiducialNode_" << anatomyName << "\""
         << " name=\"" << anatomyName << "\""
         << " hideFromEditors=\"false\"  selectable=\"true\"  selected=\"false\"  displayNodeRef=\"vtkMRMLMarkupsDisplayNodeOpenAtlas\""
         << " storageNodeRef=\"vtkMRMLMarkupsFiducialStorageNode_" << anatomyName << "\""
         << " userTags=\"\"  locked=\"0\"  markupLabelFormat=\"%N-%d\" ></MarkupsFiducial>" << std::endl;
    mout << " <MarkupsFiducialStorage";
    mout << " id=\"vtkMRMLMarkupsFiducialStorageNode_" << anatomyName << "\""
         << " name=\"" << "MarkupsFiducialStorage_" << anatomyName << "\""
         << " hideFromEditors=\"true\"  selectable=\"true\"  selected=\"false\" "
         << " fileName=\"" << fiducialFileName.str() << "\""
         << " useCompression=\"1\" readState=\"0\" writeState=\"4\" coordinateSystem=\"0\" >"
         << "</MarkupsFiducialStorage>" << std::endl;
    mout << "</MRML>" << std::endl;
    mout.close();
    return EXIT_FAILURE;
    }
  return EXIT_SUCCESS;
}
